input$fetch_first_proceed == 0)
runApp()
isTruthy(input$fetch_lake_choice)
isTruthy(input$fetch_first_proceed)
!is.null(input$fetch_first_proceed)
(input$fetch_lake_choice != "No selection" |
!is.null(input$fetch_first_proceed))
(input$fetch_lake_choice != "No selection"
input$fetch_lake_choice != "No selection"
runApp()
tmp1 = lake_polys %>%
filter(DOW == input$fetch_lake_choice)
bounds = unname(st_bbox(tmp1))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
addPolygons(data = tmp1$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", tmp1$map_label,
"<br>", "DOW: ", tmp1$DOW))) %>%
flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
tmp1$geometry
plot(tmp1$geometry)
tmp1$map_label
tmp1$DOW
bounds[1], bounds[2], bounds[3], bounds[4]
bounds
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
addPolygons(data = tmp1$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", tmp1$map_label,
"<br>", "DOW: ", tmp1$DOW)))
a = renderLeaflet({
tmp1 = lake_polys %>%
filter(DOW == input$fetch_lake_choice)
bounds = unname(st_bbox(tmp1))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
addPolygons(data = tmp1$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", tmp1$map_label,
"<br>", "DOW: ", tmp1$DOW))) %>%
flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
})
a
tmp1$geometry
runApp()
shiny::runApp()
runApp()
tmp1 = lake_polys #%>%
# filter(DOW == input$fetch_lake_choice)
bounds = unname(st_bbox(tmp1))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
addPolygons(data = tmp1$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", tmp1$map_label,
"<br>", "DOW: ", tmp1$DOW))) %>%
flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
tmp1 = lake_polys[1,] #%>%
# filter(DOW == input$fetch_lake_choice)
bounds = unname(st_bbox(tmp1))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
addPolygons(data = tmp1$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", tmp1$map_label,
"<br>", "DOW: ", tmp1$DOW))) %>%
flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
lake_polys[1,]
plot(lake_polys[1,]$geometry)
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
addPolygons(data = lake_polys[1,]$geometry)
leaflet() %>%
addTiles() %>%
setView(lng = -93.85, lat = 42.0285, zoom = 4)
install.packages("leaflet")
install.packages("sf")
library(dplyr)
library(shiny)
library(sf)
library(leaflet)
library(stringr)
library(geosphere)
library(waiter)
library(DT)
library(shinydisconnect)
leaflet() %>%
addTiles() %>%
setView(lng = -93.85, lat = 42.0285, zoom = 4)
install.packages(c("bookdown", "bslib", "checkmate", "cli", "colorspace", "digest", "future", "gert", "httr2", "knitr", "parallelly", "ps", "Rcpp", "reprex", "s2", "shiny", "tinytex", "usethis", "uuid", "withr", "wk", "xfun", "yaml"))
install.packages(c("Rcpp", "shiny"))
install.packages(c("cli", "digest"))
leaflet() %>%
addTiles() %>%
setView(lng = -93.85, lat = 42.0285, zoom = 4)
library(dplyr)
library(shiny)
library(sf)
library(leaflet)
library(stringr)
library(geosphere)
library(waiter)
library(DT)
library(shinydisconnect)
library(dplyr)
library(shiny)
library(sf)
library(leaflet)
library(stringr)
library(geosphere)
library(waiter)
library(DT)
library(shinydisconnect)
leaflet() %>%
addTiles() %>%
setView(lng = -93.85, lat = 42.0285, zoom = 4)
runApp()
tmp1 = lake_polys %>%
filter(DOW == input$fetch_lake_choice)
bounds = unname(st_bbox(tmp1))
eaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
addPolygons(data = tmp1$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", tmp1$map_label,
"<br>", "DOW: ", tmp1$DOW))) %>%
flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
addPolygons(data = tmp1$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", tmp1$map_label,
"<br>", "DOW: ", tmp1$DOW))) %>%
flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
runApp()
tmp1 = lake_polys %>%
filter(DOW == input$fetch_lake_choice)
bounds = unname(st_bbox(tmp1))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
addPolygons(data = tmp1$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", tmp1$map_label,
"<br>", "DOW: ", tmp1$DOW))) %>%
flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
runApp()
input$fetch_num_bearings
isTruthy(input$fetch_num_bearings) &&
input$fetch_num_bearings != "No selection"
isTruthy(input$fetch_num_bearings)
input$fetch_num_bearings != "No selection"
input$fetch_num_bearings
most_recent_bearing_num()
isTruthy(input$fetch_num_bearings)
input$fetch_num_bearings != "No selection"
isTruthy(input$fetch_method)
input$fetch_method != "No selection"
input$fetch_method == "By clicking a map"
most_recent_bearing_num() == "No selection"
tmp1 = lake_polys %>%
filter(DOW == input$fetch_lake_choice)
bounds = unname(st_bbox(tmp1))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
addPolygons(data = tmp1$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", tmp1$map_label,
"<br>", "DOW: ", tmp1$DOW))) %>%
flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
input$fetch_num_bearings
runApp()
input$fetch_num_bearings
isTruthy(input$fetch_num_bearings)
input$fetch_num_bearings != "No selection"
isTruthy(input$fetch_method)
input$fetch_method != "No selection"
input$fetch_method == "By clicking a map"
most_recent_bearing_num() == "No selection"
tmp1 = lake_polys %>%
filter(DOW == input$fetch_lake_choice)
bounds = unname(st_bbox(tmp1))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
addPolygons(data = tmp1$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", tmp1$map_label,
"<br>", "DOW: ", tmp1$DOW))) %>%
flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
most_recent_bearing_num()
runApp()
tmp1 = lake_polys %>%
filter(DOW == input$fetch_lake_choice)
bounds = unname(st_bbox(tmp1))
bounds
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
addPolygons(data = tmp1$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", tmp1$map_label,
"<br>", "DOW: ", tmp1$DOW))) %>%
flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
runApp()
bounds = unname(st_bbox(lake_polys[1,]))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
setView(lng = -94.6859, lat = 46.7296, zoom = 6) %>%
addPolygons(data = lake_polys[1,]$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", lake_polys[1,]$map_label,
"<br>", "DOW: ", lake_polys[1,]$DOW))) %>%
flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
leaflet::setView()
?leaflet::setView()
st_centroid(lake_polys[1,])
st_centroid(lake_polys[1,]$geometry)
st_coordinates(st_centroid(lake_polys[1,]))
unname(st_coordinates(st_centroid(lake_polys[1,])))
as.numeric(st_coordinates(st_centroid(lake_polys[1,])))
center = as.numeric(st_coordinates(st_centroid(lake_polys[1,])))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
setView(lng = -94.6859, lat = 46.7296, zoom = 6) %>%
addPolygons(data = tmp1$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", tmp1$map_label,
"<br>", "DOW: ", tmp1$DOW))) %>%
# flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
flyTo(center[1], center[2])
center = as.numeric(st_coordinates(st_centroid(lake_polys[1,])))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
setView(lng = -94.6859, lat = 46.7296, zoom = 6) %>%
addPolygons(data = tmp1$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", tmp1$map_label,
"<br>", "DOW: ", tmp1$DOW))) %>%
# flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
flyTo(center[1], center[2], 6)
center = as.numeric(st_coordinates(st_centroid(lake_polys[1,])))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
setView(lng = -94.6859, lat = 46.7296, zoom = 6) %>%
addPolygons(data = lake_polys[1,]$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", lake_polys[1,]$map_label,
"<br>", "DOW: ", lake_polys[1,]$DOW))) %>%
# flyToBounds(bounds[1], bounds[2], bounds[3], bounds[4])
flyTo(center[1], center[2], 6)
bounds = unname(st_bbox(lake_polys[1,]))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
fitBounds(lng1 = -97.239209, lat1 = 43.499356,
lng2 = -89.491694, lat2 = 49.384358) %>%
addPolygons(data = lake_polys[1,]$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", lake_polys[1,]$map_label,
"<br>", "DOW: ", lake_polys[1,]$DOW)))
bounds = unname(st_bbox(lake_polys[1,]))
leaflet(options = tileOptions(maxZoom = 20, minZoom = 6)) %>%
addTiles() %>%
fitBounds(lng1 = -97.239209, lat1 = 43.499356,
lng2 = -89.491694, lat2 = 49.384358) %>%
addPolygons(data = lake_polys[1,]$geometry,
stroke = TRUE,
group = "lake_polygon",
color = "darkblue",
weight = 4,
opacity = 0.9,
fill = T,
fillColor = "lightblue",
fillOpacity = 0.7,
label = HTML(paste0("Lake: ", lake_polys[1,]$map_label,
"<br>", "DOW: ", lake_polys[1,]$DOW))) %>%
flyToBounds(bounds[1], bounds[2],
bounds[3], bounds[4])
runApp()
most_recent_lake_choice() != "No selection"
input$fetch_lake_choice != "No selection"
input$fetch_lake_choice
most_recent_lake_choice() != input$fetch_lake_choice
runApp()
most_recent_lake_choice() != "No selection"
most_recent_lake_choice()
input$fetch_lake_choice
most_recent_lake_choice()
runApp()
most_recent_lake_choice() != "No selection"
most_recent_lake_choice()
input$fetch_lake_choice
most_recent_lake_choice()
input$fetch_num_bearings
runApp()
most_recent_lake_choice()
runApp()
most_recent_lake_choice()
runApp()
most_recent_lake_choice()
input$fetch_lake_choice
runApp()
most_recent_lake_choice()
most_recent_lake_choice() != "No selection"
most_recent_lake_choice() != input$fetch_lake_choice
runApp()
library(htmlwidgets)
?onRender
runApp()
library(leaflet.extras2)
runApp()
?leaflet.extras2::addArrowhead()
leaflet() %>%
addArrowhead(data = atlStorms2005)
runApp()
arrowhead_icon <- makeIcon(
iconUrl = "data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100' fill='blue'><polygon points='50,0 100,100 0,100'/></svg>",
iconWidth = 15, iconHeight = 15
)
runApp()
result_df
st_coordinates(result_df)
st_coordinate(result_df)
st_coordinates(result_df$geometry)
result_df$geometry[1]
result_df$geometry[2]
result_df$geometry[2][1]
coords(result_df$geometry[2])[1,]
st_coordinates(result_df$geometry[2])[1,]
st_coordinates(result_df$geometry)[1,]
st_coordinates(result_df$geometry)
sapply(result_df, function(x) {
st_coordinates(x$geometry)[1,]
})
sapply(result_df$geometry, function(x) {
st_coordinates(x)[1,]
})
lapply(result_df$geometry, function(x) {
st_coordinates(x)[1,]
})
do.call(lapply(result_df$geometry, function(x) {
st_coordinates(x)[1,]
}), rbind)
do.call(rbind, lapply(result_df$geometry, function(x) {
st_coordinates(x)[1,]
}))
endpt_coords = do.call(rbind, lapply(result_df$geometry, function(x) {
st_coordinates(x)[1,]
}))
fetch_pal = colorFactor(c("#777677", "#5b0013"),
domain = c(TRUE, FALSE))
leafletProxy("click2calc_lake") %>%
clearGroup("fetch_lines") %>%
addPolylines(data = result_df$geometry,
group = "fetch_lines",
stroke = T,
opacity = 1,
color = fetch_pal(result_df$is_max),
weight = 3,
label = lapply(paste0("Segment length: ", round(result_df$length, 2), "m<br>",
"Bearing length: ", round(result_df$total.length, 2), "m<br>",
"Longest bearing? ", result_df$is_max), HTML)
) %>%
addMarkers(lng = endpt_coords$X, lat = endpt_coords$Y, icon = arrowhead_icon)
endpt_coords$X,
endpt_coords$X
leafletProxy("click2calc_lake") %>%
clearGroup("fetch_lines") %>%
addPolylines(data = result_df$geometry,
group = "fetch_lines",
stroke = T,
opacity = 1,
color = fetch_pal(result_df$is_max),
weight = 3,
label = lapply(paste0("Segment length: ", round(result_df$length, 2), "m<br>",
"Bearing length: ", round(result_df$total.length, 2), "m<br>",
"Longest bearing? ", result_df$is_max), HTML)
) %>%
addMarkers(lng = endpt_coords[,1], lat = endpt_coords[,2], icon = arrowhead_icon)
runApp()
?addMarkers
runApp()
st_bbox(lake_polys[1,])
runApp()
input$enter2calc_lat
input$enter2calc_lng
pt = st_as_sf(data.frame(lng = input$enter2calc_lng,
lat = input$enter2calc_lat),
coords = c("lng", "lat"),
crs = 4326)
pt
this_lake = lengths(st_intersects(lake_polys[lake_polys$DOW == input$fetch_lake_choice,], pt)) > 0
this_lake == FALSE
enter2calc_df()
data.frame(lat = input$enter2calc_lat,
lng = input$enter2calc_lng,
lake = input$enter_lake_choice)
runApp()
?data.table
library(DT)
runApp()
