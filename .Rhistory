bearings2try
pt_df = enter2calc_df()
pt_df
pt_df2 = pt_df %>%
rowwise() %>%
mutate(id = row_number()) %>%
ungroup() %>%
slice(rep(row_number(), each = 75)) %>%
select(-id)
pt_df2
pt_df2 = pt_df %>%
rowwise() %>%
mutate(id = row_number())
pt_df2
pt_df2 = pt_df %>%
rowwise() %>%
mutate(id = row_number()) %>%
ungroup()
pt_df2 = pt_df %>%
rowwise() %>%
mutate(id = row_number()) %>%
ungroup() %>%
slice(rep(row_number(), each = 75))
pt_df2
View(pt_df2)
#EXPAND THE TABLE ACCORDING TO THE NUMBER OF BEARINGS VIA WITCHCRAFT
pt_df2 = pt_df %>%
rowwise() %>%
mutate(id = row_number()) %>%
ungroup() %>%
slice(rep(row_number(), each = length(bearings2try))) %>%
select(-id)
bearing_pts_asmat
runApp()
#CACHE BEARINGS AND DEGREE STEP LENGTHS
ttl_bearings = input$enter_num_bearings
step_size = 180/ttl_bearings
bearings2try = seq(-180, 180, by = step_size)
bearings2try = bearings2try[-length(bearings2try)]
pt_df = enter2calc_df()
#EXPAND THE TABLE ACCORDING TO THE NUMBER OF BEARINGS VIA WITCHCRAFT
pt_df2 = pt_df %>%
rowwise() %>%
mutate(id = row_number()) %>%
ungroup() %>%
slice(rep(row_number(), each = length(bearings2try))) %>%
select(-id)
pt_df2
pt_df2$bearing = bearings2try #SHOULD RECYCLE CORRECTLY
pt_df2$bearing = rep(bearings2try, nrow(pt_df))
pt_df2
#CREATE POINTS IN THE DIRECTIONS OF ALL THE PROPER BEARINGS
bearing_pts_aslist = sapply(1:nrow(pt_df2), function(x) {
calculate_bearing_point(start_point = c(pt_df2$lng[x], pt_df2$lat[x]),
bearing = pt_df2$bearing[x],
distance = 50000 #meters
)
})
bearing_pts_aslist
#CREATE POINTS IN THE DIRECTIONS OF ALL THE PROPER BEARINGS
bearing_pts_aslist = lapply(1:nrow(pt_df2), function(x) {
calculate_bearing_point(start_point = c(pt_df2$lng[x], pt_df2$lat[x]),
bearing = pt_df2$bearing[x],
distance = 50000 #meters
)
})
bearing_pts_aslist
bearing_pts_asmat = do.call(rbind, bearing_pts_aslist)
colnames(bearing_pts_asmat)[1] = "lng" #FOR MATCHING WITH SF/LEAFLET EXPECTATIONS FOR NAMING
bear_pts_asmat
bearing_pts_asmat
View(pt_df2)
colnames(bearing_pts_asmat) = c("bearing_lng", "bearing_lat")
bearing_pts_asmat
pt_df3 = cbind(pt_df2, bearing_pts_asmat)
head(pt_df3)
current.lake.polys = lake_polys %>% filter(DOW %in% unique(pt_df$lake))
current.lake.polys = st_transform(current.lake.polys, crs = 4326)
#CONVERT PT, BEARING PT PAIRS INTO SF, MAKE LINE STRING BETWEEN, SEPARATED BY ANY INTERSECTIONS W/ POLYGON
all_segs = lapply(1:nrow(pt_df3), function(x) {
as.matrix(c(pt_df3$lng[x], pt_df3$lat[x], pt_df3$bearing_lng[x], pt_df3$bearing_lat[x]), nrow=2, byrow=2) %>%
st_linestring() %>%
st_sfc(crs = 4326) %>% #THE RAW DATA NO LONGER HAVE A CRS W/O THIS LINE
st_intersection(current.lake.polys[current.lake.polys$DOW == pt_df3$lake[x], ]) %>%
st_cast("LINESTRING")
})
all_segs = lapply(1:nrow(pt_df3), function(x) {
as.matrix(c(pt_df3$lng[x], pt_df3$lat[x], pt_df3$bearing_lng[x], pt_df3$bearing_lat[x]), nrow=2, byrow=2) %>%
st_linestring() %>%
st_sfc(crs = 4326) %>% #THE RAW DATA NO LONGER HAVE A CRS W/O THIS LINE
st_intersection(current.lake.polys[current.lake.polys$DOW == pt_df3$lake[x], ])
all_segs = lapply(1:nrow(pt_df3), function(x) {
as.matrix(c(pt_df3$lng[x], pt_df3$lat[x], pt_df3$bearing_lng[x], pt_df3$bearing_lat[x]), nrow=2, byrow=2)})
all_segs
all_segs = lapply(1:nrow(pt_df3), function(x) {
matrix(c(pt_df3$lng[x], pt_df3$lat[x], pt_df3$bearing_lng[x], pt_df3$bearing_lat[x]), nrow=2, byrow=2) })
all_segs[[1]]
#CONVERT PT, BEARING PT PAIRS INTO SF, MAKE LINE STRING BETWEEN, SEPARATED BY ANY INTERSECTIONS W/ POLYGON
all_segs = lapply(1:nrow(pt_df3), function(x) {
matrix(c(pt_df3$lng[x], pt_df3$lat[x], pt_df3$bearing_lng[x], pt_df3$bearing_lat[x]), nrow=2, byrow=2) %>%
st_linestring() %>%
st_sfc(crs = 4326) %>% #THE RAW DATA NO LONGER HAVE A CRS W/O THIS LINE
st_intersection(current.lake.polys[current.lake.polys$DOW == pt_df3$lake[x], ]) %>%
st_cast("LINESTRING")
})
all_segs
all_segs[[1]]
x = 126
segs = all_segs[x]
segs
segs[unlist(
st_intersects(
st_buffer(
st_as_sf(pt_df3[x,],
coords = c("lng", "lat"),
crs = 4326),
1),
segs))[1]]
st_as_sf(pt_df3[x,],
coords = c("lng", "lat"),
crs = 4326)
st_buffer(
st_as_sf(pt_df3[x,],
coords = c("lng", "lat"),
crs = 4326),
1)
segs = all_segs[[x]]
segs[unlist(
st_intersects(
st_buffer(
st_as_sf(pt_df3[x,],
coords = c("lng", "lat"),
crs = 4326),
1),
segs))[1]]
#FIND LINE STRING SEGMENT CLOSEST TO OUR PT (NOT SORTED, SO TEDIOUS)
closest_segs = lapply(1:nrow(pt_df3), function(x) {
segs = all_segs[[x]]
segs[unlist(
st_intersects(
st_buffer(
st_as_sf(pt_df3[x,],
coords = c("lng", "lat"),
crs = 4326),
1),
segs))[1]]
})
closest_segs
unlist(lapply(closest_segs, st_length))
pt_df3$length = unlist(lapply(closest_segs, st_length))
pt_df
pt_df$uniq_id = seq(1, nrow(pt_df), 1)
#EXPAND THE TABLE ACCORDING TO THE NUMBER OF BEARINGS VIA WITCHCRAFT
pt_df2 = pt_df %>%
rowwise() %>%
mutate(id = row_number()) %>%
ungroup() %>%
slice(rep(row_number(), each = length(bearings2try))) %>%
select(-id)
browser()
pt_df2$bearing = rep(bearings2try, nrow(pt_df))
#CREATE POINTS IN THE DIRECTIONS OF ALL THE PROPER BEARINGS
bearing_pts_aslist = lapply(1:nrow(pt_df2), function(x) {
calculate_bearing_point(start_point = c(pt_df2$lng[x], pt_df2$lat[x]),
bearing = pt_df2$bearing[x],
distance = 50000 #meters
)
})
bearing_pts_asmat = do.call(rbind, bearing_pts_aslist)
colnames(bearing_pts_asmat) = c("bearing_lng", "bearing_lat")
pt_df3 = cbind(pt_df2, bearing_pts_asmat)
current.lake.polys = lake_polys %>% filter(DOW %in% unique(pt_df$lake))
current.lake.polys = st_transform(current.lake.polys, crs = 4326)
#CONVERT PT, BEARING PT PAIRS INTO SF, MAKE LINE STRING BETWEEN, SEPARATED BY ANY INTERSECTIONS W/ POLYGON
all_segs = lapply(1:nrow(pt_df3), function(x) {
matrix(c(pt_df3$lng[x], pt_df3$lat[x], pt_df3$bearing_lng[x], pt_df3$bearing_lat[x]), nrow=2, byrow=2) %>%
st_linestring() %>%
st_sfc(crs = 4326) %>% #THE RAW DATA NO LONGER HAVE A CRS W/O THIS LINE
st_intersection(current.lake.polys[current.lake.polys$DOW == pt_df3$lake[x], ]) %>%
st_cast("LINESTRING")
})
#FIND LINE STRING SEGMENT CLOSEST TO OUR PT (NOT SORTED, SO TEDIOUS)
closest_segs = lapply(1:nrow(pt_df3), function(x) {
segs = all_segs[[x]]
segs[unlist(
st_intersects(
st_buffer(
st_as_sf(pt_df3[x,],
coords = c("lng", "lat"),
crs = 4326),
1),
segs))[1]]
})
pt_df3$length = unlist(lapply(closest_segs, st_length))
pt_df3
pt_df3$total.length = NA
i = 1
pt_df3$length[pt_df3$uniq_id == this_pt]
this_pt = pt_df$uniq_id[i]
pt_df3$length[pt_df3$uniq_id == this_pt]
pt_df3$length[pt_df3$uniq_id == this_pt][1:ttl_bearings]
pt_df3$length[pt_df3$uniq_id == this_pt][ttl_bearings+1:length(
pt_df3$length[pt_df3$uniq_id == this_pt]
)]
length(
pt_df3$length[pt_df3$uniq_id == this_pt]
)
ttl_bearings+1
pt_df3$length[pt_df3$uniq_id == this_pt][(ttl_bearings+1):length(
pt_df3$length[pt_df3$uniq_id == this_pt]
)]
pt_df3$length[pt_df3$uniq_id == this_pt][1:ttl_bearings] +
pt_df3$length[pt_df3$uniq_id == this_pt][(ttl_bearings+1):length(
pt_df3$length[pt_df3$uniq_id == this_pt]
)]
rep(
pt_df3$length[pt_df3$uniq_id == this_pt][1:ttl_bearings] +
pt_df3$length[pt_df3$uniq_id == this_pt][(ttl_bearings+1):length(
pt_df3$length[pt_df3$uniq_id == this_pt]
)],
2)
pt_df3$total.length = NA
for(i in 1:nrow(pt_df)) {
this_pt = pt_df$uniq_id[i]
pt_df3$total.length[pt_df3$uniq_id == this_pt] =
rep(
pt_df3$length[pt_df3$uniq_id == this_pt][1:ttl_bearings] +
pt_df3$length[pt_df3$uniq_id == this_pt][(ttl_bearings+1):length(
pt_df3$length[pt_df3$uniq_id == this_pt]
)],
2)
}
i = 1
this_pt = pt_df$uniq_id[i]
pt_df3$total.length[pt_df3$uniq_id == this_pt] =
rep(
pt_df3$length[pt_df3$uniq_id == this_pt][1:ttl_bearings] +
pt_df3$length[pt_df3$uniq_id == this_pt][(ttl_bearings+1):length(
pt_df3$length[pt_df3$uniq_id == this_pt]
)],
2)
i = 2
this_pt = pt_df$uniq_id[i]
pt_df3$total.length[pt_df3$uniq_id == this_pt] =
rep(
pt_df3$length[pt_df3$uniq_id == this_pt][1:ttl_bearings] +
pt_df3$length[pt_df3$uniq_id == this_pt][(ttl_bearings+1):length(
pt_df3$length[pt_df3$uniq_id == this_pt]
)],
2)
pt_df3
pt_df3$max_length[pt_df3$uniq_id == this_pt] =
max(pt_df3$max_length[pt_df3$uniq_id == this_pt]) #FIND MAX LENGTH
pt_df3$max_length[pt_df3$uniq_id == this_pt] =
max(pt_df3$length[pt_df3$uniq_id == this_pt]) #FIND MAX LENGTH
pt_df3
pt_df3$max_length[pt_df3$uniq_id == this_pt] =
max(pt_df3$total.length[pt_df3$uniq_id == this_pt]) #FIND MAX LENGTH
pt_df3
pt_df3$max_length = NA
pt_df3$is_max = NA
#CALC TOTAL LENGTHS BY ADDING UP OPPOSITE SEGMENTS
pt_df3$total.length = NA
pt_df3$max_length = NA
pt_df3$is_max = NA
for(i in 1:nrow(pt_df)) {
this_pt = pt_df$uniq_id[i]
pt_df3$total.length[pt_df3$uniq_id == this_pt] =
rep(
pt_df3$length[pt_df3$uniq_id == this_pt][1:ttl_bearings] +
pt_df3$length[pt_df3$uniq_id == this_pt][(ttl_bearings+1):length(
pt_df3$length[pt_df3$uniq_id == this_pt]
)],
2)
pt_df3$max_length[pt_df3$uniq_id == this_pt] =
max(pt_df3$total.length[pt_df3$uniq_id == this_pt]) #FIND MAX LENGTH
pt_df3$is_max[pt_df3$uniq_id == this_pt] =
ifelse(pt_df3$total.length[pt_df3$uniq_id == this_pt] ==
pt_df3$max_length[pt_df3$uniq_id == this_pt], TRUE, FALSE) #DETERMINE WHICH SEGs ARE IN MAX SEG PAIR
}
pt_df3
i = 1
this_pt = pt_df$uniq_id[i]
pt_df3$total.length[pt_df3$uniq_id == this_pt] =
rep(
pt_df3$length[pt_df3$uniq_id == this_pt][1:ttl_bearings] +
pt_df3$length[pt_df3$uniq_id == this_pt][(ttl_bearings+1):length(
pt_df3$length[pt_df3$uniq_id == this_pt]
)],
2)
pt_df3$max_length[pt_df3$uniq_id == this_pt] =
max(pt_df3$total.length[pt_df3$uniq_id == this_pt]) #FIND MAX LENGTH
pt_df3$is_max[pt_df3$uniq_id == this_pt] =
ifelse(pt_df3$total.length[pt_df3$uniq_id == this_pt] ==
pt_df3$max_length[pt_df3$uniq_id == this_pt], TRUE, FALSE) #DETERMINE WHICH SEGs ARE IN MAX SEG PAIR
i = 2
this_pt = pt_df$uniq_id[i]
pt_df3$total.length[pt_df3$uniq_id == this_pt] =
rep(
pt_df3$length[pt_df3$uniq_id == this_pt][1:ttl_bearings] +
pt_df3$length[pt_df3$uniq_id == this_pt][(ttl_bearings+1):length(
pt_df3$length[pt_df3$uniq_id == this_pt]
)],
2)
pt_df3$max_length[pt_df3$uniq_id == this_pt] =
max(pt_df3$total.length[pt_df3$uniq_id == this_pt]) #FIND MAX LENGTH
pt_df3$is_max[pt_df3$uniq_id == this_pt] =
ifelse(pt_df3$total.length[pt_df3$uniq_id == this_pt] ==
pt_df3$max_length[pt_df3$uniq_id == this_pt], TRUE, FALSE) #DETERMINE WHICH SEGs ARE IN MAX SEG PAIR
pt_df3
runApp()
pt_df2
runApp()
?downloadHandler
runApp()
data.frame(lat = c(45.2538, 46.1899),
lng = c(-93.4213, -93.0698),
lake = c("02034200", "01000100"))
runApp()
?write.csv
test = data.frame(lat = c(45.2538, 46.1899),
+                    lng = c(-93.4213, -93.0698),
test = data.frame(lat = c(45.2538, 46.1899),
lng = c(-93.4213, -93.0698),
lake = c("02034200", "01000100")
)
names(test) == c("lat", "lng", "lake")
names_check = all(names(input$submit_template_CSV) == c("lat", "lng", "lake"))
runApp()
df = read.csv(input$submit_template_CSV$filepath)
input$submit_template_CSV$filepath
input$submit_template_CSV
df = read.csv(input$submit_template_CSV$datapath)
names_check = all(names(df) == c("lat", "lng", "lake"))
names(df)
df = read.csv(input$submit_template_CSV$datapath, row.names = F)
names_check = all(names(df) == c("lat", "lng", "lake"))
df = read.csv(input$submit_template_CSV$datapath, row.names = FALSE)
df = read_csv(input$submit_template_CSV$datapath)
library(dplyr)
library(readr)
df = read_csv(input$submit_template_CSV$datapath)
df
runApp()
df = read_csv(input$submit_template_CSV$datapath)
df = read.csv(input$submit_template_CSV$datapath)
names_check = all(names(df) == c("lat", "lng", "lake"))
df
df$lake[nchar(df$lake) == 7] = paste0("0", df$lake[nchar(df$lake) == 7])
df
these_lakes = lake_polys[lake_polys$DOW %in% unique(df$lake),]
these_lakes
these_lakes = st_transform(these_lakes, crs = 4326)
lapply(1:nrow(df), function(x) {
st_intersects(these_lakes[these_lakes$DOW == df$lake[x], ],
st_as_sf(df, coords = c("lng", "lat"), crs = 4326))
})
lapply(1:nrow(df), function(x) {
st_intersects(these_lakes[these_lakes$DOW == df$lake[x], ],
st_as_sf(df[x, ], coords = c("lng", "lat"), crs = 4326))
})
df3[3, ] = c(42.33190,-92.382,"01001000")
df[3, ] = c(42.33190,-92.382,"01001000")
df
st_intersects(these_lakes[these_lakes$DOW == df$lake[x], ],
st_as_sf(df[x, ], coords = c("lng", "lat"), crs = 4326))
lapply(1:nrow(df), function(x) {
st_intersects(these_lakes[these_lakes$DOW == df$lake[x], ],
st_as_sf(df[x, ], coords = c("lng", "lat"), crs = 4326))
})
Q
runApp()
df = read.csv(input$submit_template_CSV$datapath)
names_check = all(names(df) == c("lat", "lng", "lake"))
df$lake[nchar(df$lake) == 7] = paste0("0", df$lake[nchar(df$lake) == 7]) #REPAIR DOWS
these_lakes = lake_polys[lake_polys$DOW %in% unique(df$lake),]
these_lakes = st_transform(these_lakes, crs = 4326)
1:nrow(df)
these_lakes$DOW
df
st_intersects(these_lakes[these_lakes$DOW == df$lake[x], ],
st_as_sf(df[x, ], coords = c("lng", "lat"), crs = 4326))
lapply(1:nrow(df), function(x) {
st_intersects(these_lakes[these_lakes$DOW == df$lake[x], ],
st_as_sf(df[x, ], coords = c("lng", "lat"), crs = 4326))
})
lengths(lapply(1:nrow(df), function(x) {
st_intersects(these_lakes[these_lakes$DOW == df$lake[x], ],
st_as_sf(df[x, ], coords = c("lng", "lat"), crs = 4326))
})) > 0
unlist(lapply(1:nrow(df), function(x) {
st_intersects(these_lakes[these_lakes$DOW == df$lake[x], ],
st_as_sf(df[x, ], coords = c("lng", "lat"), crs = 4326))
}))
unlist(lapply(1:nrow(df), function(x) {
lengths(st_intersects(these_lakes[these_lakes$DOW == df$lake[x], ],
st_as_sf(df[x, ], coords = c("lng", "lat"), crs = 4326)) > 0)
}))
unlist(lapply(1:nrow(df), function(x) {
lengths(st_intersects(these_lakes[these_lakes$DOW == df$lake[x], ],
st_as_sf(df[x, ], coords = c("lng", "lat"), crs = 4326))) > 0
}))
runApp()
allow_fetch_processing()
runApp()
df = read.csv(input$submit_template_CSV$datapath)
names_check = all(names(df) == c("lat", "lng", "lake"))
names_check == TRUE
df$lake[nchar(df$lake) == 7] = paste0("0", df$lake[nchar(df$lake) == 7]) #REPAIR DOWS
these_lakes = lake_polys[lake_polys$DOW %in% unique(df$lake),]
these_lakes = st_transform(these_lakes, crs = 4326)
lake_pt_inter_check = unlist(lapply(1:nrow(df), function(x) {
lengths(st_intersects(these_lakes[these_lakes$DOW == df$lake[x], ],
st_as_sf(df[x, ], coords = c("lng", "lat"), crs = 4326))) > 0
}))
any(lake_pt_inter_check == FALSE)
runApp()
allow_fetch_processing()
runApp()
df = read.csv(input$submit_template_CSV$datapath)
df$lake[nchar(df$lake) == 7] = paste0("0", df$lake[nchar(df$lake) == 7]) #REPAIR DOWS
current.lake.polys = lake_polys[lake_polys$DOW %in% unique(df$lake),]
current.lake.polys = st_transform(current.lake.polys, crs = 4326)
nrow(df) > 0
180 %% input$template_num_bearings == 0
#CACHE BEARINGS AND DEGREE STEP LENGTHS
ttl_bearings = input$template_num_bearings
step_size = 180/ttl_bearings
bearings2try = seq(-180, 180, by = step_size)
bearings2try = bearings2try[-length(bearings2try)]
pt_df = df
pt_df$uniq_id = seq(1, nrow(pt_df), 1)
#EXPAND THE TABLE ACCORDING TO THE NUMBER OF BEARINGS VIA WITCHCRAFT
pt_df2 = pt_df %>%
rowwise() %>%
mutate(id = row_number()) %>%
ungroup() %>%
slice(rep(row_number(), each = length(bearings2try))) %>%
select(-id)
pt_df2$bearing = rep(bearings2try, nrow(pt_df))
#CREATE POINTS IN THE DIRECTIONS OF ALL THE PROPER BEARINGS
bearing_pts_aslist = lapply(1:nrow(pt_df2), function(x) {
calculate_bearing_point(start_point = c(pt_df2$lng[x], pt_df2$lat[x]),
bearing = pt_df2$bearing[x],
distance = 50000 #meters
)
})
bearing_pts_asmat = do.call(rbind, bearing_pts_aslist)
colnames(bearing_pts_asmat) = c("bearing_lng", "bearing_lat")
pt_df3 = cbind(pt_df2, bearing_pts_asmat)
#CONVERT PT, BEARING PT PAIRS INTO SF, MAKE LINE STRING BETWEEN, SEPARATED BY ANY INTERSECTIONS W/ POLYGON
all_segs = lapply(1:nrow(pt_df3), function(x) {
matrix(c(pt_df3$lng[x], pt_df3$lat[x], pt_df3$bearing_lng[x], pt_df3$bearing_lat[x]), nrow=2, byrow=2) %>%
st_linestring() %>%
st_sfc(crs = 4326) %>% #THE RAW DATA NO LONGER HAVE A CRS W/O THIS LINE
st_intersection(current.lake.polys[current.lake.polys$DOW == pt_df3$lake[x], ]) %>%
st_cast("LINESTRING")
})
#FIND LINE STRING SEGMENT CLOSEST TO OUR PT (NOT SORTED, SO TEDIOUS)
closest_segs = lapply(1:nrow(pt_df3), function(x) {
segs = all_segs[[x]]
segs[unlist(
st_intersects(
st_buffer(
st_as_sf(pt_df3[x,],
coords = c("lng", "lat"),
crs = 4326),
1),
segs))[1]]
})
pt_df3$length = unlist(lapply(closest_segs, st_length))
#CALC TOTAL LENGTHS BY ADDING UP OPPOSITE SEGMENTS
pt_df3$total.length = NA
pt_df3$max_length = NA
pt_df3$is_max = NA
for(i in 1:nrow(pt_df)) {
this_pt = pt_df$uniq_id[i]
pt_df3$total.length[pt_df3$uniq_id == this_pt] =
rep(
pt_df3$length[pt_df3$uniq_id == this_pt][1:ttl_bearings] +
pt_df3$length[pt_df3$uniq_id == this_pt][(ttl_bearings+1):length(
pt_df3$length[pt_df3$uniq_id == this_pt]
)],
2)
pt_df3$max_length[pt_df3$uniq_id == this_pt] =
max(pt_df3$total.length[pt_df3$uniq_id == this_pt]) #FIND MAX LENGTH
pt_df3$is_max[pt_df3$uniq_id == this_pt] =
ifelse(pt_df3$total.length[pt_df3$uniq_id == this_pt] ==
pt_df3$max_length[pt_df3$uniq_id == this_pt], TRUE, FALSE) #DETERMINE WHICH SEGs ARE IN MAX SEG PAIR
}
runApp()
df = read.csv(input$submit_template_CSV$datapath)
names_check = all(names(df) == c("lat", "lng", "lake"))
df$lake[nchar(df$lake) == 7] = paste0("0", df$lake[nchar(df$lake) == 7]) #REPAIR DOWS
these_lakes = lake_polys[lake_polys$DOW %in% unique(df$lake),]
these_lakes = st_transform(these_lakes, crs = 4326)
lake_pt_inter_check = unlist(lapply(1:nrow(df), function(x) {
lengths(st_intersects(these_lakes[these_lakes$DOW == df$lake[x], ],
st_as_sf(df[x, ], coords = c("lng", "lat"), crs = 4326))) > 0
}))
any(lake_pt_inter_check == FALSE)
which(lake_pt_inter_check == FALSE)
blah = which(lake_pt_inter_check == FALSE)
dput(blah)
these_lakes[-c(2L, 5L, 8L, 17L, 20L, 22L, 33L, 35L, 36L, 40L, 42L, 43L, 44L,
47L, 49L, 62L, 71L, 72L, 79L, 82L, 99L, 101L, 105L, 106L, 107L,
108L, 109L, 113L, 114L, 119L, 127L, 129L, 131L, 132L, 134L, 138L,
143L, 146L), ]
runApp()
allow_fetch_processing()
runApp()
shiny::runApp()
